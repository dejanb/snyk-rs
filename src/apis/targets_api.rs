/*
 * Snyk API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: REST
 * 
 * Generated by: https://openapi-generator.tech
 */


use reqwest;

use crate::apis::ResponseContent;
use super::{Error, configuration};

/// struct for passing parameters to the method [`delete_orgs_target`]
#[derive(Clone, Debug, Default)]
pub struct DeleteOrgsTargetParams {
    /// The requested version of the endpoint to process the request
    pub version: String,
    /// The id of the org to return the target from
    pub org_id: String,
    /// The id of the target to return
    pub target_id: String
}

/// struct for passing parameters to the method [`get_orgs_target`]
#[derive(Clone, Debug, Default)]
pub struct GetOrgsTargetParams {
    /// The requested version of the endpoint to process the request
    pub version: String,
    /// The id of the org to return the target from
    pub org_id: String,
    /// The id of the target to return
    pub target_id: String
}

/// struct for passing parameters to the method [`get_orgs_targets`]
#[derive(Clone, Debug, Default)]
pub struct GetOrgsTargetsParams {
    /// The requested version of the endpoint to process the request
    pub version: String,
    /// The id of the org to return a list of targets
    pub org_id: String,
    /// Return the page of results immediately after this cursor
    pub starting_after: Option<String>,
    /// Return the page of results immediately before this cursor
    pub ending_before: Option<String>,
    /// Number of results to return per page
    pub limit: Option<i32>,
    /// Return targets that match the provided value of isPrivate
    pub is_private: Option<bool>,
    /// Return targets that match the provided remoteUrl. Currently null for all projects except those imported from the CLI
    pub remote_url: Option<String>,
    /// Return targets that match the provided origin
    pub origin: Option<String>,
    /// Whether to exclude targets from the response that have no associated projects
    pub exclude_empty: Option<bool>,
    /// Return targets with display names starting with the provided string
    pub display_name: Option<String>
}


/// struct for typed errors of method [`delete_orgs_target`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DeleteOrgsTargetError {
    Status400(crate::models::ListGroups400Response),
    Status401(crate::models::ListGroups400Response),
    Status404(crate::models::ListGroups400Response),
    Status409(crate::models::ListGroups400Response),
    Status500(crate::models::ListGroups400Response),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_orgs_target`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetOrgsTargetError {
    Status400(crate::models::ListGroups400Response),
    Status401(crate::models::ListGroups400Response),
    Status404(crate::models::ListGroups400Response),
    Status500(crate::models::ListGroups400Response),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_orgs_targets`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetOrgsTargetsError {
    Status400(crate::models::ListGroups400Response),
    Status401(crate::models::ListGroups400Response),
    Status403(crate::models::ListGroups400Response),
    Status404(crate::models::ListGroups400Response),
    Status500(crate::models::ListGroups400Response),
    UnknownValue(serde_json::Value),
}


/// Delete the specified target. Will fail if the target has any projects.
pub async fn delete_orgs_target(configuration: &configuration::Configuration, params: DeleteOrgsTargetParams) -> Result<(), Error<DeleteOrgsTargetError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let version = params.version;
    let org_id = params.org_id;
    let target_id = params.target_id;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/orgs/{org_id}/targets/{target_id}", local_var_configuration.base_path, org_id=crate::apis::urlencode(org_id), target_id=crate::apis::urlencode(target_id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("version", &version.to_string())]);
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<DeleteOrgsTargetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Get a specified target for an organization.
pub async fn get_orgs_target(configuration: &configuration::Configuration, params: GetOrgsTargetParams) -> Result<crate::models::GetOrgsTarget200Response, Error<GetOrgsTargetError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let version = params.version;
    let org_id = params.org_id;
    let target_id = params.target_id;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/orgs/{org_id}/targets/{target_id}", local_var_configuration.base_path, org_id=crate::apis::urlencode(org_id), target_id=crate::apis::urlencode(target_id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("version", &version.to_string())]);
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetOrgsTargetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Get a list of an organization's targets.
pub async fn get_orgs_targets(configuration: &configuration::Configuration, params: GetOrgsTargetsParams) -> Result<crate::models::GetOrgsTargets200Response, Error<GetOrgsTargetsError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let version = params.version;
    let org_id = params.org_id;
    let starting_after = params.starting_after;
    let ending_before = params.ending_before;
    let limit = params.limit;
    let is_private = params.is_private;
    let remote_url = params.remote_url;
    let origin = params.origin;
    let exclude_empty = params.exclude_empty;
    let display_name = params.display_name;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/orgs/{org_id}/targets", local_var_configuration.base_path, org_id=crate::apis::urlencode(org_id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("version", &version.to_string())]);
    if let Some(ref local_var_str) = starting_after {
        local_var_req_builder = local_var_req_builder.query(&[("starting_after", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = ending_before {
        local_var_req_builder = local_var_req_builder.query(&[("ending_before", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = limit {
        local_var_req_builder = local_var_req_builder.query(&[("limit", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = is_private {
        local_var_req_builder = local_var_req_builder.query(&[("isPrivate", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = remote_url {
        local_var_req_builder = local_var_req_builder.query(&[("remoteUrl", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = origin {
        local_var_req_builder = local_var_req_builder.query(&[("origin", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = exclude_empty {
        local_var_req_builder = local_var_req_builder.query(&[("excludeEmpty", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = display_name {
        local_var_req_builder = local_var_req_builder.query(&[("displayName", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetOrgsTargetsError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

